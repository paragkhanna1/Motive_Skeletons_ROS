#include "ros/ros.h"
#include "std_msgs/String.h"
#include <tf2/LinearMath/Quaternion.h>
#include <tf2_ros/transform_broadcaster.h>
#include <geometry_msgs/TransformStamped.h>
#include <geometry_msgs/PoseStamped.h>

#include <inttypes.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#ifdef _WIN32
#   include <conio.h>
#else
#   include <unistd.h>
#   include <termios.h>
#endif

#include <vector>

#include <NatNetTypes.h>
#include <NatNetCAPI.h>
#include <NatNetClient.h>

#include <sstream>


#ifndef _WIN32
char getch();
#endif
void _WriteHeader(FILE* fp, sDataDescriptions* pBodyDefs);
void _WriteFrame(FILE* fp, sFrameOfMocapData* data);
void _WriteFooter(FILE* fp);
sFrameOfMocapData* data_cp = NULL;
void NATNET_CALLCONV ServerDiscoveredCallback( const sNatNetDiscoveredServer* pDiscoveredServer, void* pUserContext );
void NATNET_CALLCONV DataHandler(sFrameOfMocapData* data, void* pUserData);    // receives data from the server
void NATNET_CALLCONV MessageHandler(Verbosity msgType, const char* msg);      // receives NatNet error messages
void resetClient();
int ConnectClient();
static const ConnectionType kDefaultConnectionType = ConnectionType_Multicast;

NatNetClient* g_pClient = NULL;
FILE* g_outputFile;

std::vector< sNatNetDiscoveredServer > g_discoveredServers;
sNatNetClientConnectParams g_connectParams;
char g_discoveredMulticastGroupAddr[kNatNetIpv4AddrStrLenMax] = NATNET_DEFAULT_MULTICAST_ADDRESS;
int g_analogSamplesPerMocapFrame = 0;
sServerDescription g_serverDescription;


/**
 * This tutorial demonstrates simple sending of messages over the ROS system.
 */
int main(int argc, char **argv)
{
  /**
   * The ros::init() function needs to see argc and argv so that it can perform
   * any ROS arguments and name remapping that were provided at the command line.
   * For programmatic remappings you can use a different version of init() which takes
   * remappings directly, but for most command-line programs, passing argc and argv is
   * the easiest way to do it.  The third argument to init() is the name of the node.
   *
   * You must call one of the versions of ros::init() before using any other
   * part of the ROS system.
   */
  ros::init(argc, argv, "mocap_client");

  /**
   * NodeHandle is the main access point to communications with the ROS system.
   * The first NodeHandle constructed will fully initialize this node, and the last
   * NodeHandle destructed will close down the node.
   */
  ros::NodeHandle n;

  /**
   * The advertise() function is how you tell ROS that you want to
   * publish on a given topic name. This invokes a call to the ROS
   * master node, which keeps a registry of who is publishing and who
   * is subscribing. After this advertise() call is made, the master
   * node will notify anyone who is trying to subscribe to this topic name,
   * and they will in turn negotiate a peer-to-peer connection with this
   * node.  advertise() returns a Publisher object which allows you to
   * publish messages on that topic through a call to publish().  Once
   * all copies of the returned Publisher object are destroyed, the topic
   * will be automatically unadvertised.
   *
   * The second parameter to advertise() is the size of the message queue
   * used for publishing messages.  If messages are published more quickly
   * than we can send them, the number here specifies how many messages to
   * buffer up before throwing some away.
   */
  //ros::Publisher chatter_pub = n.advertise<std_msgs::String>("chatter", 1000);
  ros::Publisher posePublisher_baton_tf = n.advertise<geometry_msgs::TransformStamped>("baton", 1000);
  //geometry_msgs::TransformStamped transformStamped


  ros::Publisher posePublisher_Skeleton1_hip = n.advertise<geometry_msgs::TransformStamped>("Skeleton1/Hip", 1000);
  ros::Publisher posePublisher_Skeleton1_ab = n.advertise<geometry_msgs::TransformStamped>("Skeleton1/Ab", 1000);
  ros::Publisher posePublisher_Skeleton1_chest = n.advertise<geometry_msgs::TransformStamped>("Skeleton1/Chest", 1000);
  ros::Publisher posePublisher_Skeleton1_neck = n.advertise<geometry_msgs::TransformStamped>("Skeleton1/Neck", 1000);
  ros::Publisher posePublisher_Skeleton1_head = n.advertise<geometry_msgs::TransformStamped>("Skeleton1/Head", 1000);
  ros::Publisher posePublisher_Skeleton1_LShoulder = n.advertise<geometry_msgs::TransformStamped>("Skeleton1/LShoulder", 1000);
  ros::Publisher posePublisher_Skeleton1_LUArm = n.advertise<geometry_msgs::TransformStamped>("Skeleton1/LUArm", 1000);
  ros::Publisher posePublisher_Skeleton1_LFArm = n.advertise<geometry_msgs::TransformStamped>("Skeleton1/LFArm", 1000);
  ros::Publisher posePublisher_Skeleton1_LHand = n.advertise<geometry_msgs::TransformStamped>("Skeleton1/LHand", 1000);
  ros::Publisher posePublisher_Skeleton1_RShoulder = n.advertise<geometry_msgs::TransformStamped>("Skeleton1/RShoulder", 1000);
  ros::Publisher posePublisher_Skeleton1_RUArm = n.advertise<geometry_msgs::TransformStamped>("Skeleton1/RUArm", 1000);
  ros::Publisher posePublisher_Skeleton1_RFArm = n.advertise<geometry_msgs::TransformStamped>("Skeleton1/RFArm", 1000);
  ros::Publisher posePublisher_Skeleton1_RHand = n.advertise<geometry_msgs::TransformStamped>("Skeleton1/RHand", 1000);

  ros::Publisher posePublisher_Skeleton2_hip = n.advertise<geometry_msgs::TransformStamped>("Skeleton2/Hip", 1000);
  ros::Publisher posePublisher_Skeleton2_ab = n.advertise<geometry_msgs::TransformStamped>("Skeleton2/Ab", 1000);
  ros::Publisher posePublisher_Skeleton2_chest = n.advertise<geometry_msgs::TransformStamped>("Skeleton2/Chest", 1000);
  ros::Publisher posePublisher_Skeleton2_neck = n.advertise<geometry_msgs::TransformStamped>("Skeleton2/Neck", 1000);
  ros::Publisher posePublisher_Skeleton2_head = n.advertise<geometry_msgs::TransformStamped>("Skeleton2/Head", 1000);
  ros::Publisher posePublisher_Skeleton2_LShoulder = n.advertise<geometry_msgs::TransformStamped>("Skeleton2/LShoulder", 1000);
  ros::Publisher posePublisher_Skeleton2_LUArm = n.advertise<geometry_msgs::TransformStamped>("Skeleton2/LUArm", 1000);
  ros::Publisher posePublisher_Skeleton2_LFArm = n.advertise<geometry_msgs::TransformStamped>("Skeleton2/LFArm", 1000);
  ros::Publisher posePublisher_Skeleton2_LHand = n.advertise<geometry_msgs::TransformStamped>("Skeleton2/LHand", 1000);
  ros::Publisher posePublisher_Skeleton2_RShoulder = n.advertise<geometry_msgs::TransformStamped>("Skeleton2/RShoulder", 1000);
  ros::Publisher posePublisher_Skeleton2_RUArm = n.advertise<geometry_msgs::TransformStamped>("Skeleton2/RUArm", 1000);
  ros::Publisher posePublisher_Skeleton2_RFArm = n.advertise<geometry_msgs::TransformStamped>("Skeleton2/RFArm", 1000);
  ros::Publisher posePublisher_Skeleton2_RHand = n.advertise<geometry_msgs::TransformStamped>("Skeleton2/RHand", 1000);




  ros::Rate loop_rate(120);

  /**
   * A count of how many messages we have sent. This is used to create
   * a unique string for each message.
   */
  //int count = 0;

  // print version info
    unsigned char ver[4];
    NatNet_GetVersion( ver );
    printf( "NatNet Sample Client (NatNet ver. %d.%d.%d.%d)\n", ver[0], ver[1], ver[2], ver[3] );
    NatNet_SetLogCallback( MessageHandler );

    // create NatNet client
    g_pClient = new NatNetClient();

    // set the frame callback handler
    g_pClient->SetFrameReceivedCallback( DataHandler, g_pClient );	// this function will receive data from the server
     // Do asynchronous server discovery.
        printf( "Looking for servers on the local network.\n" );
        printf( "Press the number key that corresponds to any discovered server to connect to that server.\n" );
        printf( "Press Q at any time to quit.\n\n" );

        NatNetDiscoveryHandle discovery;
        NatNet_CreateAsyncServerDiscovery( &discovery, ServerDiscoveredCallback );

        while ( const int c = getch() )
        {
            if ( c >= '1' && c <= '9' )
            {
                const size_t serverIndex = c - '1';
                if ( serverIndex < g_discoveredServers.size() )
                {
                    const sNatNetDiscoveredServer& discoveredServer = g_discoveredServers[serverIndex];

                    if ( discoveredServer.serverDescription.bConnectionInfoValid )
                    {
                        // Build the connection parameters.
#ifdef _WIN32
                        _snprintf_s(
#else
                        snprintf(
#endif
                            g_discoveredMulticastGroupAddr, sizeof g_discoveredMulticastGroupAddr,
                            "%" PRIu8 ".%" PRIu8".%" PRIu8".%" PRIu8"",
                            discoveredServer.serverDescription.ConnectionMulticastAddress[0],
                            discoveredServer.serverDescription.ConnectionMulticastAddress[1],
                            discoveredServer.serverDescription.ConnectionMulticastAddress[2],
                            discoveredServer.serverDescription.ConnectionMulticastAddress[3]
                        );

                        g_connectParams.connectionType = discoveredServer.serverDescription.ConnectionMulticast ? ConnectionType_Multicast : ConnectionType_Unicast;
                        g_connectParams.serverCommandPort = discoveredServer.serverCommandPort;
                        g_connectParams.serverDataPort = discoveredServer.serverDescription.ConnectionDataPort;
                        g_connectParams.serverAddress = discoveredServer.serverAddress;
                        g_connectParams.localAddress = discoveredServer.localAddress;
                        g_connectParams.multicastAddress = g_discoveredMulticastGroupAddr;
                    }
                    else
                    {
                        // We're missing some info because it's a legacy server.
                        // Guess the defaults and make a best effort attempt to connect.
                        g_connectParams.connectionType = kDefaultConnectionType;
                        g_connectParams.serverCommandPort = discoveredServer.serverCommandPort;
                        g_connectParams.serverDataPort = 0;
                        g_connectParams.serverAddress = discoveredServer.serverAddress;
                        g_connectParams.localAddress = discoveredServer.localAddress;
                        g_connectParams.multicastAddress = NULL;
                    }

                    break;
                }
            }
            else if ( c == 'q' )
            {
                return 0;
            }
        }

        NatNet_FreeAsyncServerDiscovery( discovery );
  int iResult;

    // Connect to Motive
  iResult = ConnectClient();
  if (iResult != ErrorCode_OK)
    {
        printf("Error initializing client. See log for details. Exiting.\n");
        return 1;
    }
  else
    {
        printf("Client initialized and ready.\n");
    }

 int i=0;
 static tf2_ros::TransformBroadcaster br;
 geometry_msgs::TransformStamped transformStamped;
 geometry_msgs::TransformStamped transform_skeleton1[13];
 geometry_msgs::TransformStamped transform_skeleton2[13];



  while (ros::ok())
  {
    /**
     * This is a message object. You stuff it with data, and then publish it.
     */
    if (data_cp !=NULL)
    {
      //printf("FrameID : %d\n", data_cp->iFrame);
      //printf("Skeletons [Count=%d]\n", data->nSkeletons);
      printf("Rigid Bodies [Count=%d]\n", data_cp->nRigidBodies);
    	for(i=0; i < data_cp->nRigidBodies; i++)
    	{   transformStamped.header.stamp = ros::Time::now();
            // params
            // 0x01 : bool, rigid body was successfully tracked in this frame
            bool bTrackingValid = data_cp->RigidBodies[i].params & 0x01;
        if (i==0)
        {
          transformStamped.header.stamp = transformStamped.header.stamp;
          transformStamped.header.frame_id = "world";
          transformStamped.child_frame_id = "baton";

          transformStamped.transform.translation.x = data_cp->RigidBodies[i].x;
          transformStamped.transform.translation.y = -data_cp->RigidBodies[i].z;
          transformStamped.transform.translation.z = data_cp->RigidBodies[i].y;

          transformStamped.transform.rotation.x = data_cp->RigidBodies[i].qx;
          transformStamped.transform.rotation.y = -data_cp->RigidBodies[i].qz;
          transformStamped.transform.rotation.z = data_cp->RigidBodies[i].qy;
          transformStamped.transform.rotation.w = data_cp->RigidBodies[i].qw;

          posePublisher_baton_tf.publish(transformStamped);


        }
        br.sendTransform(transformStamped);
    		printf("Rigid Body [ID=%d  Error=%3.2f  Valid=%d]\n", data_cp->RigidBodies[i].ID, data_cp->RigidBodies[i].MeanError, bTrackingValid);
    		printf("\tx\ty\tz\tqx\tqy\tqz\tqw\n");
    		printf("\t%3.2f\t%3.2f\t%3.2f\t%3.2f\t%3.2f\t%3.2f\t%3.2f\n",
    			data_cp->RigidBodies[i].x,
    			data_cp->RigidBodies[i].y,
    			data_cp->RigidBodies[i].z,
    			data_cp->RigidBodies[i].qx,
    			data_cp->RigidBodies[i].qz,
          data_cp->RigidBodies[i].qy,
    			data_cp->RigidBodies[i].qw);
    	}

    	// Skeletons
    	printf("Skeletons [Count=%d]\n", data_cp->nSkeletons);
    	for(i=0; i < data_cp->nSkeletons; i++)
    	{
    		sSkeletonData skData = data_cp->Skeletons[i];
    		printf("Skeleton [ID=%d  Bone count=%d]\n", skData.skeletonID, skData.nRigidBodies);
    		for(int j=0; j< skData.nRigidBodies; j++)
    		{
    			sRigidBodyData rbData = skData.RigidBodyData[j];
    			printf("Bone %d\t%3.2f\t%3.2f\t%3.2f\t%3.2f\t%3.2f\t%3.2f\t%3.2f\n",
    				rbData.ID, rbData.x, rbData.y, rbData.z, rbData.qx, rbData.qy, rbData.qz, rbData.qw );

            transform_skeleton1[j].header.stamp = transformStamped.header.stamp;

          transform_skeleton1[j].transform.translation.x = rbData.x;
          transform_skeleton1[j].transform.translation.y = -rbData.z;
          transform_skeleton1[j].transform.translation.z = rbData.y;

          transform_skeleton1[j].transform.rotation.x = rbData.qx;
          transform_skeleton1[j].transform.rotation.y = -rbData.qz;
          transform_skeleton1[j].transform.rotation.z = rbData.qy;
          transform_skeleton1[j].transform.rotation.w = rbData.qw;


          if (i==0)
          {
            if (j==0)
            {
              transform_skeleton1[j].child_frame_id = "Skeleton1/hip";
              transform_skeleton1[j].header.frame_id = "world";

              posePublisher_Skeleton1_hip.publish(transform_skeleton1[j]);

            }
            else if (j==1)
            {
              transform_skeleton1[j].child_frame_id = "Skeleton1/ab";
              transform_skeleton1[j].header.frame_id = "Skeleton1/hip";
              posePublisher_Skeleton1_ab.publish(transform_skeleton1[j]);
            }
            else if (j==2)
            {
              transform_skeleton1[j].child_frame_id = "Skeleton1/chest";
              transform_skeleton1[j].header.frame_id = "Skeleton1/ab";
              posePublisher_Skeleton1_chest.publish(transform_skeleton1[j]);
            }
            else if (j==3)
            {
              transform_skeleton1[j].child_frame_id = "Skeleton1/neck";
              transform_skeleton1[j].header.frame_id = "Skeleton1/chest";
              posePublisher_Skeleton1_neck.publish(transform_skeleton1[j]);
            }
            else if (j==4)
            {
              transform_skeleton1[j].child_frame_id = "Skeleton1/head";
              transform_skeleton1[j].header.frame_id = "Skeleton1/neck";
              posePublisher_Skeleton1_head.publish(transform_skeleton1[j]);
            }
            else if (j==5)
            {
              transform_skeleton1[j].child_frame_id = "Skeleton1/LShoulder";
              transform_skeleton1[j].header.frame_id = "Skeleton1/chest";
              posePublisher_Skeleton1_LShoulder.publish(transform_skeleton1[j]);
            }
            else if (j==6)
            {
              transform_skeleton1[j].child_frame_id = "Skeleton1/LUArm";
              transform_skeleton1[j].header.frame_id = "Skeleton1/LShoulder";
              posePublisher_Skeleton1_LUArm.publish(transform_skeleton1[j]);
            }
            else if (j==7)
            {
              transform_skeleton1[j].child_frame_id = "Skeleton1/LFArm";
              transform_skeleton1[j].header.frame_id = "Skeleton1/LUArm";
              posePublisher_Skeleton1_LFArm.publish(transform_skeleton1[j]);
            }
            else if (j==8)
            {
              transform_skeleton1[j].child_frame_id = "Skeleton1/LHand";
              transform_skeleton1[j].header.frame_id = "Skeleton1/LFArm";
              posePublisher_Skeleton1_LHand.publish(transform_skeleton1[j]);
            }
            else if (j==9)
            {
              transform_skeleton1[j].child_frame_id = "Skeleton1/RShoulder";
              transform_skeleton1[j].header.frame_id = "Skeleton1/chest";
              posePublisher_Skeleton1_RShoulder.publish(transform_skeleton1[j]);
            }
            else if (j==10)
            {
              transform_skeleton1[j].child_frame_id = "Skeleton1/RUArm";
              transform_skeleton1[j].header.frame_id = "Skeleton1/RShoulder";
              posePublisher_Skeleton1_RUArm.publish(transform_skeleton1[j]);
            }
            else if (j==11)
            {
              transform_skeleton1[j].child_frame_id = "Skeleton1/RFArm";
              transform_skeleton1[j].header.frame_id = "Skeleton1/RUArm";
              posePublisher_Skeleton1_RFArm.publish(transform_skeleton1[j]);
            }
            else if (j==12)
            {
              transform_skeleton1[j].child_frame_id = "Skeleton1/RHand";
              transform_skeleton1[j].header.frame_id = "Skeleton1/RFArm";
              posePublisher_Skeleton1_RHand.publish(transform_skeleton1[j]);
            }
            br.sendTransform(transform_skeleton1[j]);
          }
          if (i==1)
          {
            if (j==0)
            {
              transform_skeleton1[j].child_frame_id = "Skeleton2/hip";
              transform_skeleton1[j].header.frame_id = "world";
              posePublisher_Skeleton2_hip.publish(transform_skeleton1[j]);
            }
            else if (j==1)
            {
              transform_skeleton1[j].child_frame_id = "Skeleton2/ab";
              transform_skeleton1[j].header.frame_id = "Skeleton2/hip";
              posePublisher_Skeleton2_ab.publish(transform_skeleton1[j]);
            }
            else if (j==2)
            {
              transform_skeleton1[j].child_frame_id = "Skeleton2/chest";
              transform_skeleton1[j].header.frame_id = "Skeleton2/ab";
              posePublisher_Skeleton2_chest.publish(transform_skeleton1[j]);
            }
            else if (j==3)
            {
              transform_skeleton1[j].child_frame_id = "Skeleton2/neck";
              transform_skeleton1[j].header.frame_id = "Skeleton2/chest";
              posePublisher_Skeleton2_neck.publish(transform_skeleton1[j]);
            }
            else if (j==4)
            {
              transform_skeleton1[j].child_frame_id = "Skeleton2/head";
              transform_skeleton1[j].header.frame_id = "Skeleton2/neck";
              posePublisher_Skeleton2_head.publish(transform_skeleton1[j]);
            }
            else if (j==5)
            {
              transform_skeleton1[j].child_frame_id = "Skeleton2/LShoulder";
              transform_skeleton1[j].header.frame_id = "Skeleton2/chest";
              posePublisher_Skeleton2_LShoulder.publish(transform_skeleton1[j]);
            }
            else if (j==6)
            {
              transform_skeleton1[j].child_frame_id = "Skeleton2/LUArm";
              transform_skeleton1[j].header.frame_id = "Skeleton2/LShoulder";
              posePublisher_Skeleton2_LUArm.publish(transform_skeleton1[j]);
            }
            else if (j==7)
            {
              transform_skeleton1[j].child_frame_id = "Skeleton2/LFArm";
              transform_skeleton1[j].header.frame_id = "Skeleton2/LUArm";
              posePublisher_Skeleton2_LFArm.publish(transform_skeleton1[j]);
            }
            else if (j==8)
            {
              transform_skeleton1[j].child_frame_id = "Skeleton2/LHand";
              transform_skeleton1[j].header.frame_id = "Skeleton2/LFArm";
              posePublisher_Skeleton2_LHand.publish(transform_skeleton1[j]);
            }
            else if (j==9)
            {
              transform_skeleton1[j].child_frame_id = "Skeleton2/RShoulder";
              transform_skeleton1[j].header.frame_id = "Skeleton2/chest";
              posePublisher_Skeleton2_RShoulder.publish(transform_skeleton1[j]);
            }
            else if (j==10)
            {
              transform_skeleton1[j].child_frame_id = "Skeleton2/RUArm";
              transform_skeleton1[j].header.frame_id = "Skeleton2/RShoulder";
              posePublisher_Skeleton2_RUArm.publish(transform_skeleton1[j]);
            }
            else if (j==11)
            {
              transform_skeleton1[j].child_frame_id = "Skeleton2/RFArm";
              transform_skeleton1[j].header.frame_id = "Skeleton2/RUArm";
              posePublisher_Skeleton2_RFArm.publish(transform_skeleton1[j]);
            }
            else if (j==12)
            {
              transform_skeleton1[j].child_frame_id = "Skeleton2/RHand";
              transform_skeleton1[j].header.frame_id = "Skeleton2/RFArm";
              posePublisher_Skeleton2_RHand.publish(transform_skeleton1[j]);
            }
            br.sendTransform(transform_skeleton1[j]);
          }
    		}
    	}

      //std_msgs::String msg;

      //std::stringstream ss;
    //  ss << "hello world " << count;
      //msg.data = ss.str();

      //ROS_INFO("%s", msg.data.c_str());

      /**
       * The publish() function is how you send messages. The parameter
       * is the message object. The type of this object must agree with the type
       * given as a template parameter to the advertise<>() call, as was done
       * in the constructor above.
       */
    //  chatter_pub.publish(msg);
    }
    ros::spinOnce();

    loop_rate.sleep();
    //++count;
  }


  return 0;
}
void NATNET_CALLCONV ServerDiscoveredCallback( const sNatNetDiscoveredServer* pDiscoveredServer, void* pUserContext )
{
    char serverHotkey = '.';
    if ( g_discoveredServers.size() < 9 )
    {
        serverHotkey = static_cast<char>('1' + g_discoveredServers.size());
    }

    printf( "[%c] %s %d.%d at %s ",
        serverHotkey,
        pDiscoveredServer->serverDescription.szHostApp,
        pDiscoveredServer->serverDescription.HostAppVersion[0],
        pDiscoveredServer->serverDescription.HostAppVersion[1],
        pDiscoveredServer->serverAddress );

    if ( pDiscoveredServer->serverDescription.bConnectionInfoValid )
    {
        printf( "(%s)\n", pDiscoveredServer->serverDescription.ConnectionMulticast ? "multicast" : "unicast" );
    }
    else
    {
        printf( "(WARNING: Legacy server, could not autodetect settings. Auto-connect may not work reliably.)\n" );
    }

    g_discoveredServers.push_back( *pDiscoveredServer );
}

// Establish a NatNet Client connection
int ConnectClient()
{
    // Release previous server
    g_pClient->Disconnect();

    // Init Client and connect to NatNet server
    int retCode = g_pClient->Connect( g_connectParams );
    if (retCode != ErrorCode_OK)
    {
        printf("Unable to connect to server.  Error code: %d. Exiting.\n", retCode);
        return ErrorCode_Internal;
    }
    else
    {
        // connection succeeded

        void* pResult;
        int nBytes = 0;
        ErrorCode ret = ErrorCode_OK;

        // print server info
        memset( &g_serverDescription, 0, sizeof( g_serverDescription ) );
        ret = g_pClient->GetServerDescription( &g_serverDescription );
        if ( ret != ErrorCode_OK || ! g_serverDescription.HostPresent )
        {
            printf("Unable to connect to server. Host not present. Exiting.\n");
            return 1;
        }
        printf("\n[SampleClient] Server application info:\n");
        printf("Application: %s (ver. %d.%d.%d.%d)\n", g_serverDescription.szHostApp, g_serverDescription.HostAppVersion[0],
            g_serverDescription.HostAppVersion[1], g_serverDescription.HostAppVersion[2], g_serverDescription.HostAppVersion[3]);
        printf("NatNet Version: %d.%d.%d.%d\n", g_serverDescription.NatNetVersion[0], g_serverDescription.NatNetVersion[1],
            g_serverDescription.NatNetVersion[2], g_serverDescription.NatNetVersion[3]);
        printf("Client IP:%s\n", g_connectParams.localAddress );
        printf("Server IP:%s\n", g_connectParams.serverAddress );
        printf("Server Name:%s\n", g_serverDescription.szHostComputerName);

        // get mocap frame rate
        ret = g_pClient->SendMessageAndWait("FrameRate", &pResult, &nBytes);
        if (ret == ErrorCode_OK)
        {
            float fRate = *((float*)pResult);
            printf("Mocap Framerate : %3.2f\n", fRate);
        }
        else
            printf("Error getting frame rate.\n");

        // get # of analog samples per mocap frame of data
        ret = g_pClient->SendMessageAndWait("AnalogSamplesPerMocapFrame", &pResult, &nBytes);
        if (ret == ErrorCode_OK)
        {
            g_analogSamplesPerMocapFrame = *((int*)pResult);
            printf("Analog Samples Per Mocap Frame : %d\n", g_analogSamplesPerMocapFrame);
        }
        else
            printf("Error getting Analog frame rate.\n");
    }

    return ErrorCode_OK;
}

// DataHandler receives data from the server
// This function is called by NatNet when a frame of mocap data is available
void NATNET_CALLCONV DataHandler(sFrameOfMocapData* data, void* pUserData)
{
    NatNetClient* pClient = (NatNetClient*) pUserData;
    data_cp=data;
    // Software latency here is defined as the span of time between:
    //   a) The reception of a complete group of 2D frames from the camera system (CameraDataReceivedTimestamp)
    // and
    //   b) The time immediately prior to the NatNet frame being transmitted over the network (TransmitTimestamp)
    //
    // This figure may appear slightly higher than the "software latency" reported in the Motive user interface,
    // because it additionally includes the time spent preparing to stream the data via NatNet.
    const uint64_t softwareLatencyHostTicks = data->TransmitTimestamp - data->CameraDataReceivedTimestamp;
    const double softwareLatencyMillisec = (softwareLatencyHostTicks * 1000) / static_cast<double>(g_serverDescription.HighResClockFrequency);

    // Transit latency is defined as the span of time between Motive transmitting the frame of data, and its reception by the client (now).
    // The SecondsSinceHostTimestamp method relies on NatNetClient's internal clock synchronization with the server using Cristian's algorithm.
    const double transitLatencyMillisec = pClient->SecondsSinceHostTimestamp( data->TransmitTimestamp ) * 1000.0;

    if (g_outputFile)
    {
        _WriteFrame( g_outputFile, data );
    }

    int i=0;

    //printf("FrameID : %d\n", data->iFrame);
    //printf("Timestamp : %3.2lf\n", data->fTimestamp);
    //printf("Software latency : %.2lf milliseconds\n", softwareLatencyMillisec);

    // Only recent versions of the Motive software in combination with ethernet camera systems support system latency measurement.
    // If it's unavailable (for example, with USB camera systems, or during playback), this field will be zero.
    const bool bSystemLatencyAvailable = data->CameraMidExposureTimestamp != 0;

    if ( bSystemLatencyAvailable )
    {
        // System latency here is defined as the span of time between:
        //   a) The midpoint of the camera exposure window, and therefore the average age of the photons (CameraMidExposureTimestamp)
        // and
        //   b) The time immediately prior to the NatNet frame being transmitted over the network (TransmitTimestamp)
        const uint64_t systemLatencyHostTicks = data->TransmitTimestamp - data->CameraMidExposureTimestamp;
        const double systemLatencyMillisec = (systemLatencyHostTicks * 1000) / static_cast<double>(g_serverDescription.HighResClockFrequency);

        // Client latency is defined as the sum of system latency and the transit time taken to relay the data to the NatNet client.
        // This is the all-inclusive measurement (photons to client processing).
        const double clientLatencyMillisec = pClient->SecondsSinceHostTimestamp( data->CameraMidExposureTimestamp ) * 1000.0;

        // You could equivalently do the following (not accounting for time elapsed since we calculated transit latency above):
        //const double clientLatencyMillisec = systemLatencyMillisec + transitLatencyMillisec;

        printf( "System latency : %.2lf milliseconds\n", systemLatencyMillisec );
        printf( "Total client latency : %.2lf milliseconds (transit time +%.2lf ms)\n", clientLatencyMillisec, transitLatencyMillisec );
    }
    else
    {
        //printf( "Transit latency : %.2lf milliseconds\n", transitLatencyMillisec );
    }

    // FrameOfMocapData params
    bool bIsRecording = ((data->params & 0x01)!=0);
    bool bTrackedModelsChanged = ((data->params & 0x02)!=0);
    if(bIsRecording)
        printf("RECORDING\n");
    if(bTrackedModelsChanged)
        printf("Models Changed.\n");


    // timecode - for systems with an eSync and SMPTE timecode generator - decode to values
	int hour, minute, second, frame, subframe;
    NatNet_DecodeTimecode( data->Timecode, data->TimecodeSubframe, &hour, &minute, &second, &frame, &subframe );
	// decode to friendly string
	char szTimecode[128] = "";
    NatNet_TimecodeStringify( data->Timecode, data->TimecodeSubframe, szTimecode, 128 );
	//printf("Timecode : %s\n", szTimecode);
  /*
	// Rigid Bodies
	printf("Rigid Bodies [Count=%d]\n", data->nRigidBodies);
	for(i=0; i < data->nRigidBodies; i++)
	{
        // params
        // 0x01 : bool, rigid body was successfully tracked in this frame
        bool bTrackingValid = data->RigidBodies[i].params & 0x01;

		printf("Rigid Body [ID=%d  Error=%3.2f  Valid=%d]\n", data->RigidBodies[i].ID, data->RigidBodies[i].MeanError, bTrackingValid);
		printf("\tx\ty\tz\tqx\tqy\tqz\tqw\n");
		printf("\t%3.2f\t%3.2f\t%3.2f\t%3.2f\t%3.2f\t%3.2f\t%3.2f\n",
			data->RigidBodies[i].x,
			data->RigidBodies[i].y,
			data->RigidBodies[i].z,
			data->RigidBodies[i].qx,
			data->RigidBodies[i].qy,
			data->RigidBodies[i].qz,
			data->RigidBodies[i].qw);
	}

	// Skeletons
	printf("Skeletons [Count=%d]\n", data->nSkeletons);
	for(i=0; i < data->nSkeletons; i++)
	{
		sSkeletonData skData = data->Skeletons[i];
		printf("Skeleton [ID=%d  Bone count=%d]\n", skData.skeletonID, skData.nRigidBodies);
		for(int j=0; j< skData.nRigidBodies; j++)
		{
			sRigidBodyData rbData = skData.RigidBodyData[j];
			printf("Bone %d\t%3.2f\t%3.2f\t%3.2f\t%3.2f\t%3.2f\t%3.2f\t%3.2f\n",
				rbData.ID, rbData.x, rbData.y, rbData.z, rbData.qx, rbData.qy, rbData.qz, rbData.qw );
		}
	}
  /*
	// labeled markers - this includes all markers (Active, Passive, and 'unlabeled' (markers with no asset but a PointCloud ID)
    bool bOccluded;     // marker was not visible (occluded) in this frame
    bool bPCSolved;     // reported position provided by point cloud solve
    bool bModelSolved;  // reported position provided by model solve
    bool bHasModel;     // marker has an associated asset in the data stream
    bool bUnlabeled;    // marker is 'unlabeled', but has a point cloud ID that matches Motive PointCloud ID (In Motive 3D View)
	bool bActiveMarker; // marker is an actively labeled LED marker

	printf("Markers [Count=%d]\n", data->nLabeledMarkers);
	for(i=0; i < data->nLabeledMarkers; i++)
	{
        bOccluded = ((data->LabeledMarkers[i].params & 0x01)!=0);
        bPCSolved = ((data->LabeledMarkers[i].params & 0x02)!=0);
        bModelSolved = ((data->LabeledMarkers[i].params & 0x04) != 0);
        bHasModel = ((data->LabeledMarkers[i].params & 0x08) != 0);
        bUnlabeled = ((data->LabeledMarkers[i].params & 0x10) != 0);
		bActiveMarker = ((data->LabeledMarkers[i].params & 0x20) != 0);

        sMarker marker = data->LabeledMarkers[i];

        // Marker ID Scheme:
        // Active Markers:
        //   ID = ActiveID, correlates to RB ActiveLabels list
        // Passive Markers:
        //   If Asset with Legacy Labels
        //      AssetID 	(Hi Word)
        //      MemberID	(Lo Word)
        //   Else
        //      PointCloud ID
        int modelID, markerID;
        NatNet_DecodeID( marker.ID, &modelID, &markerID );

        char szMarkerType[512];
        if (bActiveMarker)
            strcpy(szMarkerType, "Active");
        else if(bUnlabeled)
            strcpy(szMarkerType, "Unlabeled");
        else
            strcpy(szMarkerType, "Labeled");

        printf("%s Marker [ModelID=%d, MarkerID=%d] [size=%3.2f] [pos=%3.2f,%3.2f,%3.2f]\n",
            szMarkerType, modelID, markerID, marker.size, marker.x, marker.y, marker.z);
	}

    // force plates
    printf("Force Plate [Count=%d]\n", data->nForcePlates);
    for(int iPlate=0; iPlate < data->nForcePlates; iPlate++)
    {
        printf("Force Plate %d\n", data->ForcePlates[iPlate].ID);
        for(int iChannel=0; iChannel < data->ForcePlates[iPlate].nChannels; iChannel++)
        {
            printf("\tChannel %d:\t", iChannel);
            if(data->ForcePlates[iPlate].ChannelData[iChannel].nFrames == 0)
            {
                printf("\tEmpty Frame\n");
            }
            else if(data->ForcePlates[iPlate].ChannelData[iChannel].nFrames != g_analogSamplesPerMocapFrame)
            {
                printf("\tPartial Frame [Expected:%d   Actual:%d]\n", g_analogSamplesPerMocapFrame, data->ForcePlates[iPlate].ChannelData[iChannel].nFrames);
            }
            for(int iSample=0; iSample < data->ForcePlates[iPlate].ChannelData[iChannel].nFrames; iSample++)
                printf("%3.2f\t", data->ForcePlates[iPlate].ChannelData[iChannel].Values[iSample]);
            printf("\n");
        }
    }

    // devices
    printf("Device [Count=%d]\n", data->nDevices);
    for (int iDevice = 0; iDevice < data->nDevices; iDevice++)
    {
        printf("Device %d\n", data->Devices[iDevice].ID);
        for (int iChannel = 0; iChannel < data->Devices[iDevice].nChannels; iChannel++)
        {
            printf("\tChannel %d:\t", iChannel);
            if (data->Devices[iDevice].ChannelData[iChannel].nFrames == 0)
            {
                printf("\tEmpty Frame\n");
            }
            else if (data->Devices[iDevice].ChannelData[iChannel].nFrames != g_analogSamplesPerMocapFrame)
            {
                printf("\tPartial Frame [Expected:%d   Actual:%d]\n", g_analogSamplesPerMocapFrame, data->Devices[iDevice].ChannelData[iChannel].nFrames);
            }
            for (int iSample = 0; iSample < data->Devices[iDevice].ChannelData[iChannel].nFrames; iSample++)
                printf("%3.2f\t", data->Devices[iDevice].ChannelData[iChannel].Values[iSample]);
            printf("\n");
        }
    }
    */
}


// MessageHandler receives NatNet error/debug messages
void NATNET_CALLCONV MessageHandler( Verbosity msgType, const char* msg )
{
    // Optional: Filter out debug messages
    if ( msgType < Verbosity_Info )
    {
        return;
    }

    printf( "\n[NatNetLib]" );

    switch ( msgType )
    {
        case Verbosity_Debug:
            printf( " [DEBUG]" );
            break;
        case Verbosity_Info:
            printf( "  [INFO]" );
            break;
        case Verbosity_Warning:
            printf( "  [WARN]" );
            break;
        case Verbosity_Error:
            printf( " [ERROR]" );
            break;
        default:
            printf( " [?????]" );
            break;
    }

    printf( ": %s\n", msg );
}


/* File writing routines */
void _WriteHeader(FILE* fp, sDataDescriptions* pBodyDefs)
{
	int i=0;

    if ( pBodyDefs->arrDataDescriptions[0].type != Descriptor_MarkerSet )
        return;

	sMarkerSetDescription* pMS = pBodyDefs->arrDataDescriptions[0].Data.MarkerSetDescription;

	fprintf(fp, "<MarkerSet>\n\n");
	fprintf(fp, "<Name>\n%s\n</Name>\n\n", pMS->szName);

	fprintf(fp, "<Markers>\n");
	for(i=0; i < pMS->nMarkers; i++)
	{
		fprintf(fp, "%s\n", pMS->szMarkerNames[i]);
	}
	fprintf(fp, "</Markers>\n\n");

	fprintf(fp, "<Data>\n");
	fprintf(fp, "Frame#\t");
	for(i=0; i < pMS->nMarkers; i++)
	{
		fprintf(fp, "M%dX\tM%dY\tM%dZ\t", i, i, i);
	}
	fprintf(fp,"\n");

}


void _WriteFrame(FILE* fp, sFrameOfMocapData* data)
{
	fprintf(fp, "%d", data->iFrame);
	for(int i =0; i < data->MocapData->nMarkers; i++)
	{
		fprintf(fp, "\t%.5f\t%.5f\t%.5f", data->MocapData->Markers[i][0], data->MocapData->Markers[i][1], data->MocapData->Markers[i][2]);
	}
	fprintf(fp, "\n");
}


void _WriteFooter(FILE* fp)
{
	fprintf(fp, "</Data>\n\n");
	fprintf(fp, "</MarkerSet>\n");
}


void resetClient()
{
	int iSuccess;

	printf("\n\nre-setting Client\n\n.");

	iSuccess = g_pClient->Disconnect();
	if(iSuccess != 0)
		printf("error un-initting Client\n");

    iSuccess = g_pClient->Connect( g_connectParams );
	if(iSuccess != 0)
		printf("error re-initting Client\n");
}


#ifndef _WIN32
char getch()
{
    char buf = 0;
    termios old = { 0 };

    fflush( stdout );

    if ( tcgetattr( 0, &old ) < 0 )
        perror( "tcsetattr()" );

    old.c_lflag &= ~ICANON;
    old.c_lflag &= ~ECHO;
    old.c_cc[VMIN] = 1;
    old.c_cc[VTIME] = 0;

    if ( tcsetattr( 0, TCSANOW, &old ) < 0 )
        perror( "tcsetattr ICANON" );

    if ( read( 0, &buf, 1 ) < 0 )
        perror( "read()" );

    old.c_lflag |= ICANON;
    old.c_lflag |= ECHO;

    if ( tcsetattr( 0, TCSADRAIN, &old ) < 0 )
        perror( "tcsetattr ~ICANON" );

    //printf( "%c\n", buf );

    return buf;
}
#endif
